# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-08 18:45+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Spanish (http://www.transifex.com/projects/p/mongodb-manual/language/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# d64c63509bd34d3b8b06c4bc53fd7433
#: ../source/reference/write-concern.txt:6
msgid "Write Concern Reference"
msgstr ""

# 83cca367f73b4aba9558f625b335b29b
#: ../source/reference/write-concern.txt:11
msgid "Overview"
msgstr ""

# 820a8862e8be49b99bf59b8a75ba78ed
#: ../source/includes/introduction-write-concern.rst:1
msgid ""
":term:`Write concern` describes the guarantee that MongoDB provides when "
"reporting on the success of a write operation. The strength of the write "
"concerns determine the level of guarantee. When inserts, updates and deletes"
" have a *weak* write concern, write operations return quickly. In some "
"failure cases, write operations issued with weak write concerns may not "
"persist. With *stronger* write concerns, clients wait after sending a write "
"operation for MongoDB to confirm the write operations."
msgstr ""

# 7a566957aea24686a9b60f46573a1bb8
#: ../source/includes/introduction-write-concern.rst:10
msgid ""
"MongoDB provides different levels of write concern to better address the "
"specific needs of applications. Clients may adjust write concern to ensure "
"that the most important operations persist successfully to an entire MongoDB"
" deployment. For other less critical operations, clients can adjust the "
"write concern to ensure faster performance rather than ensure persistence to"
" the entire deployment."
msgstr ""

# 0bd9fe68367a469f8f8dc55ba4cfac58
#: ../source/reference/write-concern.txt:15
msgid ""
":doc:`/core/write-concern` for an introduction to write concern in MongoDB."
msgstr ""

# 6a1834578f1c48a3994b896a69a8201c
#: ../source/reference/write-concern.txt:19
msgid "Read Isolation Behavior"
msgstr ""

# cf9eef82ab574ac3a288d0b148eb7276
#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr ""

# e7a5f3e3f6f543b09406b364b5a5c19c
#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr ""

# 855faf18005a4c6cae1167a69c37f886
#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""

# 28c0dab2ebe8400d85ad9d2d900c59bf
#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr ""

# 8819034b3eb8420ebeadad9a96e534e4
#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr ""

# 42761cb0189b491aa0937961b3048836
#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr ""

# 298e8ef9baba481e9606d2b2b4d5e36f
#: ../source/reference/write-concern.txt:24
msgid "Available Write Concern"
msgstr ""

# 571d7b7d94cf43909ff0ffbc50e09df2
#: ../source/reference/write-concern.txt:26
msgid ""
"To provide write concern, :doc:`drivers </applications/drivers>` issue the "
":dbcommand:`getLastError` command after a write operation and receive a "
"document with information about the last operation. This document's ``err`` "
"field contains either:"
msgstr ""

# e1fdbf16c11940a38592c157a7329b92
#: ../source/reference/write-concern.txt:31
msgid ""
"``null``, which indicates the write operations have completed successfully, "
"or"
msgstr ""

# e2fc2bb4d60d4c73bf6c379da186ce41
#: ../source/reference/write-concern.txt:34
msgid "a description of the last error encountered."
msgstr ""

# 83d6fa9201bb4a878b999adfe96a9e09
#: ../source/reference/write-concern.txt:36
msgid ""
"The definition of a \"successful write\" depends on the arguments specified "
"to :dbcommand:`getLastError`, or in replica sets, the configuration of "
":data:`~local.system.replset.settings.getLastErrorDefaults`. When deciding "
"the level of write concern for your application, see the introduction to "
":doc:`/core/write-concern`."
msgstr ""

# 79ad30fdebb248e1ac8d47750d10dfe8
#: ../source/reference/write-concern.txt:44
msgid ""
"The :dbcommand:`getLastError` command has the following options to configure"
" write concern requirements:"
msgstr ""

# c2f5a64c30a746e0b68bd4e4377ccea7
#: ../source/reference/write-concern.txt:47
msgid "``j`` or \"journal\" option"
msgstr ""

# c81124dae9c14baf8f35503a5a0e013e
#: ../source/reference/write-concern.txt:49
msgid ""
"This option confirms that the :program:`mongod` instance has written the "
"data to the on-disk journal and ensures data is not lost if the "
":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
"enable, as shown in the following example:"
msgstr ""

# 3068b824564044a8abc1f080e44ce142
#: ../source/reference/write-concern.txt:58
msgid ""
"If you set :data:`journal` to true, and the :program:`mongod` does not have "
"journaling enabled, as with :setting:`nojournal`, then "
":dbcommand:`getLastError` will provide basic receipt acknowledgment, and "
"will include a ``jnote`` field in its return document."
msgstr ""

# 2ac8159c12b14aa098c95bb2136234c0
#: ../source/reference/write-concern.txt:63
msgid "``w`` option"
msgstr ""

# acde4a88726b424cab603e985b282ac2
#: ../source/reference/write-concern.txt:65
msgid ""
"This option provides the ability to disable write concern entirely *as well "
"as* specifies the write concern operations for :term:`replica sets <replica "
"set>`. See :doc:`Write Concern Considerations </core/write-concern>` for an "
"introduction to the fundamental concepts of write concern. By default, the "
"``w`` option is set to ``1``, which provides basic receipt acknowledgment on"
" a single :program:`mongod` instance or on the :term:`primary` in a replica "
"set."
msgstr ""

# 48b2cc2c2ea546e09a4e6d69c97c98c1
#: ../source/reference/write-concern.txt:74
msgid "The ``w`` option takes the following values:"
msgstr ""

# 3f4668d2d9c64d38881f787abfd1b88c
#: ../source/reference/write-concern.txt:76
msgid "``0``:"
msgstr ""

# bda73172e0ba43a68b2963e7f7786475
#: ../source/reference/write-concern.txt:78
msgid ""
"Disables basic acknowledgment of write operations, but returns information "
"about socket exceptions and networking errors to the application."
msgstr ""

# 99fe1314efc0433fbad16fc98438eb9e
#: ../source/reference/write-concern.txt:84
msgid ""
"If you disable basic write operation acknowledgment but require journal "
"commit acknowledgment, the journal commit prevails, and the driver will "
"require that :program:`mongod` will acknowledge the write operation."
msgstr ""

# 18ee7f016fb9424c92f525edf321c8b4
#: ../source/reference/write-concern.txt:89
msgid "``1``:"
msgstr ""

# dc4ef5653dc240b089538e158293c356
#: ../source/reference/write-concern.txt:91
msgid ""
"Provides acknowledgment of write operations on a standalone "
":program:`mongod` or the :term:`primary` in a replica set."
msgstr ""

# efeb305bd7834252a7d3b2f4dc2827f9
#: ../source/reference/write-concern.txt:94
msgid "*A number greater than 1*:"
msgstr ""

# f85847867d184d6cad5feb57dbfba5e3
#: ../source/reference/write-concern.txt:96
msgid ""
"Guarantees that write operations have propagated successfully to the "
"specified number of replica set members including the primary. If you set "
"``w`` to a number that is greater than the number of set members that hold "
"data, MongoDB waits for the non-existent members to become available, which "
"means MongoDB blocks indefinitely."
msgstr ""

# 41d61a854e964f76bc92158f9b9f5d3f
#: ../source/reference/write-concern.txt:102
msgid "``majority``:"
msgstr ""

# eac57718110a401686edd06bac8867b7
#: ../source/reference/write-concern.txt:104
msgid ""
"Confirms that write operations have propagated to the majority of configured"
" replica set: a majority of the set's configured members must acknowledge "
"the write operation before it succeeds. This allows you to avoid hard coding"
" assumptions about the size of your replica set into your application."
msgstr ""

# eee4c168b5604515b9ac936a6395b899
#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, "
":dbcommand:`getLastError` treats ``w:majority`` as equivalent to ``w:1``. In"
" earlier versions of MongoDB, ``w:majority`` produces an error in "
":doc:`master/slave </core/master-slave>` deployments."
msgstr ""

# 219978df7881488ea7bae899d4bbc438
#: ../source/reference/write-concern.txt:112
msgid "*A tag set*:"
msgstr ""

# bc171d047fea42a9a3c31d9482d5fba2
#: ../source/reference/write-concern.txt:114
msgid ""
"By specifying a :ref:`tag set <replica-set-configuration-tag-sets>` you can "
"have fine-grained control over which replica set members must acknowledge a "
"write operation to satisfy the required level of write concern."
msgstr ""

# 789a7ba7197d4b088adc6f447a431ef5
#: ../source/reference/write-concern.txt:119
msgid ""
":dbcommand:`getLastError` also supports a ``wtimeout`` setting which allows "
"clients to specify a timeout for the write concern: if you don't specify "
"``wtimeout``, or if you give it a value of ``0``, and the :program:`mongod` "
"cannot fulfill the write concern the :dbcommand:`getLastError` will block, "
"potentially forever."
msgstr ""

# 9b898224bb394708bba12fb5ba0324e6
#: ../source/reference/write-concern.txt:125
msgid ""
"For more information on write concern and replica sets, see :ref:`Write "
"Concern for Replica Sets <replica-set-write-concern>` for more information."
msgstr ""

# cb750cc9bac440499e97d926d981d0d0
#: ../source/reference/write-concern.txt:129
msgid ""
"In sharded clusters, :program:`mongos` instances will pass write concern on "
"to the shard :program:`mongod` instances."
msgstr ""
