# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/manage-mongodb-processes.txt:3
# 045631574019452b86230ad2b03b915a
msgid "Manage ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:7
# ab66b7fa339e49e0987c4bdb2064566d
msgid "MongoDB runs as a standard program. You can start MongoDB from a command line by issuing the :program:`mongod` command and specifying options. For a list of options, see :doc:`/reference/program/mongod`. MongoDB can also run as a Windows service. For details, see :ref:`tutorial-mongod-as-windows-service`. To install MongoDB, see :doc:`/installation`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:14
# ef3ccc873e22427a9820180ba5c64c38
msgid "The following examples assume the directory containing the :program:`mongod` process is in your system paths. The :program:`mongod` process is the primary database process that runs on an individual server. :program:`mongos` provides a coherent MongoDB interface equivalent to a :program:`mongod` from the perspective of a client. The :program:`mongo` binary provides the administrative shell."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:22
# 6c598e9efd8f4b1690c92a46bb8646bd
msgid "This document  page discusses the :program:`mongod` process; however, some portions of this document may be applicable to :program:`mongos` instances."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:26
# 8a4ceabf295d4e88a1a562c9ce7b5b67
msgid ":doc:`/administration/configuration`, :doc:`/reference/program/mongod`, :doc:`/reference/program/mongos`, and :doc:`/reference/configuration-options`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:31
# 1ed9cf3a34ac4f64abd52a712ef26778
msgid "Start ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:33
# 20053078ce674e75980a4f416deeaf1e
msgid "By default, MongoDB stores data in the ``/data/db`` directory. On Windows, MongoDB stores data in ``C:\\data\\db``. On all platforms, MongoDB listens for connections from clients on port ``27017``."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:37
# f7ccc187e2be4a49ab51550efeb94b23
msgid "To start MongoDB using all defaults, issue the following command at the system shell:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:45
# 7cf44384480c48ea9b6f3dd1e4a3b455
msgid "Specify a Data Directory"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:47
# 6a8fc6b2bf314682ac2092e7f9af4649
msgid "If you want :program:`mongod` to store data files at a path *other than* ``/data/db`` you can specify a :setting:`~storage.dbPath`. The :setting:`~storage.dbPath` must exist before you start :program:`mongod`. If it does not exist, create the directory and the permissions so that :program:`mongod` can read and write data to this path. For more information on permissions, see the :ref:`security operations documentation <security-operations>`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:55
# 4344f935901b4f4d9f0ef56eff76af3e
msgid "To specify a :setting:`~storage.dbPath` for :program:`mongod` to use as a data directory, use the :option:`--dbpath <mongod --dbpath>` option. The following invocation will start a :program:`mongod` instance and store data in the ``/srv/mongodb`` path"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:65
# c1e308c905f24f4ab0778209a27048be
msgid "Specify a TCP Port"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:67
# 609af0abb18847cc8a11ec0bef1f4dab
msgid "Only a single process can listen for connections on a network interface at a time. If you run multiple :program:`mongod` processes on a single machine, or have other processes that must use this port, you must assign each a different port to listen on for client connections."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:73
# 6ce8ca73413f4879ac834b1d39928ed4
msgid "To specify a port to :program:`mongod`, use the :option:`--port <mongod --port>` option on the command line. The following command starts :program:`mongod` listening on port ``12345``:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:81
# ae8e2815a3b54cc6ac8fa582d5233167
msgid "Use the default port number when possible, to avoid confusion."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:84
# 2a7036f4900d486fbd2e98bdf461e009
msgid "Start ``mongod`` as a Daemon"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:86
# 856b3261c72a41679c4c3d0d8d15dc8c
msgid "To run a :program:`mongod` process as a daemon (i.e. :setting:`fork`), *and* write its output to a log file, use the :option:`--fork <mongod --fork>` and :option:`--logpath <mongod --logpath>` options. You must create the log directory; however, :program:`mongod` will create the log file if it does not exist."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:92
# 792be4099d9a42e180145ac03d91cab8
msgid "The following command starts :program:`mongod` as a daemon and records log output to ``/var/log/mongodb.log``."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:100
# a7770b4135b84a1d83ca9f491cd54e56
msgid "Additional Configuration Options"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:102
# 99b3d7ab9e8e4d80939c3eb49c683903
msgid "For an overview of common configurations and common configuration deployments. configurations for common use cases, see :doc:`/administration/configuration`."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:109
# 2ec537100de145b4b2a01b12b7ac6837
msgid "Stop ``mongod`` Processes"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:111
# 49d1dc2720c2431aaa8a9b895a8986be
msgid "In a clean shutdown a :program:`mongod` completes all pending operations, flushes all data to data files, and closes all data files. Other shutdowns are *unclean* and can compromise the validity the data files."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:122
# 9c1d676534ed4179bb1c0f6dd5bdb531
msgid "To ensure a clean shutdown, always shutdown :program:`mongod` instances using one of the following methods:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:126
# 1044ed19b7a64f6690abc36dfa831b51
msgid "Use ``shutdownServer()``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:128
# 9d9564c4bb604f499d4f31d0b0810e8a
msgid "Shut down the :program:`mongod` from the :program:`mongo` shell using the :method:`db.shutdownServer()` method as follows:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:136
# d6c368acd972498eb9312b85126516cf
msgid "Calling the same method from a control script accomplishes the same result."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:138
# e3d84d55a75d451591e8aa7e9fccded1
msgid "For systems with :setting:`~security.authentication` enabled, users may only issue :method:`db.shutdownServer()` when authenticated to the ``admin`` database or via the localhost interface on systems without authentication enabled."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:144
# bcddc668fa754527a45d089dacab9001
msgid "Use ``--shutdown``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:146
# db0af9287f374bd98d235ad8a792415d
msgid "From the Linux command line, shut down the :program:`mongod` using the :option:`--shutdown <mongod --shutdown>` option in the following command:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:154
# db37cd23b505427f951b1132576e570a
msgid "Use ``CTRL-C``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:156
# 3c356e283a2e48debf5ab888f91703be
msgid "When running the :program:`mongod` instance in interactive mode (i.e. without :option:`--fork <mongod --fork>`), issue ``Control-C`` to perform a clean shutdown."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:161
# 2cdd5ae436b64cf4be2ddc653cc02020
msgid "Use ``kill``"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:163
# 209336dd3f554494a55fa4194ec2030f
msgid "From the Linux command line, shut down a specific :program:`mongod` instance using the following command:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:172
# 82159b367dc2441d94fe1e81a2bb6c03
msgid "Never use ``kill -9`` (i.e. ``SIGKILL``) to terminate a mongod instance."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:175
# eea4336712044c919d560a8b240099e6
msgid "Stop a Replica Set"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:178
# 0fe63551e8d04a87914c56ebd0a4050c
msgid "Procedure"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:180
# cf7fc2289cf843189167fbf1a78ee7e0
msgid "If the :program:`mongod` is the :term:`primary` in a :term:`replica set`, the shutdown process for these :program:`mongod` instances has the following steps:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:184
# 0ad9f4710a294538b4645df56810ce35
msgid "Check how up-to-date the :term:`secondaries <secondary>` are."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:186
# f17bfdf2cd1b450489e3d489e94d24b8
msgid "If no secondary is within 10 seconds of the primary, :program:`mongod` will return a message that it will not shut down. You can pass the :dbcommand:`shutdown` command a ``timeoutSecs`` argument to wait for a secondary to catch up."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:191
# 1577a56d1a24435f9be91cbf2082bb2d
msgid "If there is a secondary within 10 seconds of the primary, the primary will step down and wait for the secondary to catch up."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:194
# 921ade55e4ae4660a5fd531419dea95a
msgid "After 60 seconds or once the secondary has caught up, the primary will shut down."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:198
# 5b38c0054a5944e799dbe81bc7fae7f2
msgid "Force Replica Set Shutdown"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:200
# 175eb47f15ac46b387db84be2db298e4
msgid "If there is no up-to-date secondary and you want the primary to shut down, issue the :dbcommand:`shutdown` command with the ``force`` argument, as in the following :program:`mongo` shell operation:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:208
# d049b84739fd4fab9798f0c5a31776c8
msgid "To keep checking the secondaries for a specified number of seconds if none are immediately up-to-date, issue :dbcommand:`shutdown` with the ``timeoutSecs`` argument. MongoDB will keep checking the secondaries for the specified number of seconds if none are immediately up-to-date. If any of the secondaries catch up within the allotted time, the primary will shut down. If no secondaries catch up, it will not shut down."
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:215
# b601600d7e1d4ff292cd3d66c6ed43bf
msgid "The following command issues :dbcommand:`shutdown` with ``timeoutSecs`` set to ``5``:"
msgstr ""

#: ../source/tutorial/manage-mongodb-processes.txt:222
# 229a2be991c14a4999f23bc709021555
msgid "Alternately you can use the ``timeoutSecs`` argument with the :method:`db.shutdownServer()` method:"
msgstr ""

