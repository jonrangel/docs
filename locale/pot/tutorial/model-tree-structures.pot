# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
# adb7002b96aa40c3b3c4d6b68cb7746c
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
# 3b8b985f1b9240cb853f84e91533c0d0
msgid "To model hierarchical or nested data relationships, you can use references to implement tree-like structures. The following *Tree* pattern examples model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
# 25e0f7e5b1414d0c9610011ed7f7fa60
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
# 55b71b90be8c47ab8ec40ea8147ae6f2
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
# c34ab36b29b848e89486a56026d59f2d
msgid "The *Child References* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
# 875216c13d614d9da169b0a4dbba2a77
# 4a1003f64f104f98ad25a7eef11aa8a4
# 2ea517a1db4d4ce2a64dea689ac41fd2
# 57bc4bc4e61643cfbda07865b6a0caad
# 680dd7f6c42e400db31881e0aa2ff5bf
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
# 8e9f414d3b344fa2ade24dc414eeb117
msgid "The following example models the tree using *Child References*, storing the reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
# 4052290418044866914375a532d4e731
msgid "The query to retrieve the immediate children of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
# bbd948767b874b3fa45dd40a86b0b5ef
msgid "You can create an index on the field ``children`` to enable fast search by the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
# 00970912d0184cd19aaf1b7afd2ce7f3
msgid "You can query for a node in the ``children`` field to find its parent node as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
# e9090145c9d541dea10b07dda3717fd3
msgid "The *Child References* pattern provides a suitable solution to tree storage as long as no operations on subtrees are necessary. This pattern may also provide a suitable solution for storing graphs where a node may have multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
# 4fad037b090642e49ee5e0bde7f04256
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
# 1ed61747a0564baba6d649fe6b6b35d8
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
# b25bf632a9614298a89268498b17accd
msgid "The *Parent References* pattern stores each tree node in a document; in addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
# 618ddd67932a49a88efc322349f75938
msgid "The following example models the tree using *Parent References*, storing the reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
# 0117129b51d14949b51f52ceeecc05cd
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
# f95f89742fa448f6963bbed29b5e5940
msgid "You can create an index on the field ``parent`` to enable fast search by the parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
# b76f1e6d89be484db56e25d10548e56a
msgid "You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
# 8bdc349796754901972b997e6fa0d7ee
msgid "The *Parent Links* pattern provides a simple solution to tree storage but requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
# fed6b885910c40dc8b73d319b1e83cb6
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
# 338e19043d654ca79eacfe02c42b17a2
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
# 24d80b95800f44fc9f09a076c16f6742
msgid "The *Array of Ancestors* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
# d4f2a6dbf5604f6192a53d19d07b794c
msgid "The following example models the tree using *Array of Ancestors*. In addition to the ``ancestors`` field, these documents also store the reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
# 5af0cd9f909243caa742dc371500339a
msgid "The query to retrieve the ancestors or path of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
# 95950da6b7d24994936b33b7b02f1248
msgid "You can create an index on the field ``ancestors`` to enable fast search by the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
# ca5613f3c73e42a68f2206387b5b1919
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
# c587834dfe1b47d982128a6c8bc69701
msgid "The *Array of Ancestors* pattern provides a fast and efficient solution to find the descendants and the ancestors of a node by creating an index on the elements of the ancestors field. This makes *Array of Ancestors* a good choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
# 918b8c3f170a4c9a8c51d9eb634f4b83
msgid "The *Array of Ancestors* pattern is slightly slower than the :doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
# a824200a042949d38b9cdf848b15fdf2
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
# 19401580e2954791aec1b4d135012a90
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
# 19e6c6a7bbc948d6a747ba9b36899d0d
msgid "The *Materialized Paths* pattern stores each tree node in a document; in addition to the tree node, document stores as a string the id(s) of the node's ancestors or path. Although the *Materialized Paths* pattern requires additional steps of working with strings and regular expressions, the pattern also provides more flexibility in working with the path, such as finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
# 7ecb9ea95f8945109e3b36f0ea44fac9
msgid "The following example models the tree using *Materialized Paths*, storing the path in the field ``path``; the path string uses the comma ``,`` as a delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
# 17527f68b82c4082ab76dccd007bda3c
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
# 41109b31cda3491d9d612faff2acfd74
msgid "You can use regular expressions on the ``path`` field to find the descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
# ccca3afb14f744a8a49c170005a54dbe
msgid "You can also retrieve the descendants of ``Books`` where the ``Books`` is also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
# 6e11df5e3e2c486a8526ef45e750c460
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
# b84a1e48ba0241609ad52a1a6a10636f
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
# 8244942442ae4c64ba7c0710b5685e3d
msgid "For queries of the ``Books`` sub-tree (e.g. ``/^,Books,/``) an index on the ``path`` field improves the query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
# afbff193e7544b8c8b53770e1534f290
msgid "For queries of the ``Programming`` sub-tree (e.g. ``/,Programming,/``), or similar queries of sub-tress, where the node might be in the middle of the indexed string, the query must inspect the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
# 74433df6c41145bf8fdc480df0aa36de
msgid "For these queries an index *may* provide some performance improvement *if* the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
# 3d5bf1e5d76d49ee8fc20cf8c5abb362
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
# f97ce16bdfea4fac8954db04e5566d57
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
# 1841a5da8a5144fe95fe9ad55d5fe4f2
msgid "The *Nested Sets* pattern identifies each node in the tree as stops in a round-trip traversal of the tree. The application visits each node in the tree twice; first during the initial trip, and second during the return trip. The *Nested Sets* pattern stores each tree node in a document; in addition to the tree node, document stores the id of node's parent, the node's initial stop in the ``left`` field, and its return stop in the ``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
# f49eff5e631d439e9f5af98604a9dabc
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
# d44ed5598bcf4c23bd304656e086e807
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
# 1820b3a86c4e4c218b9feaf5fb37276b
msgid "The *Nested Sets* pattern provides a fast and efficient solution for finding subtrees but is inefficient for modifying the tree structure. As such, this pattern is best for static trees that do not change."
msgstr ""

