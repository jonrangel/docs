# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
# af0c6ce5bb6e4d608fdfef5b13da2e61
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:9
# 9ba65d9adf8b495ea1d1a416e668a34a
msgid "The :query:`$regex` operator provides regular expression capabilities for pattern matching *strings* in queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE.\")"
msgstr ""

#: ../source/reference/operator/query/regex.txt:13
# ab1561d6bbe1406c9d869e16b10600d4
msgid "You can specify regular expressions using regular expression objects or using the :query:`$regex` operator. The following examples are equivalent:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:22
# 403c96ca4b9e46a3b7dbcc3054f10929
msgid "These expressions match all documents in ``collection`` where the value of ``field`` matches the case-insensitive regular expression ``acme.*corp``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:26
# c81506483a9a4c3f8c3cc2b9a1fdc70a
msgid ":query:`$regex` uses \"Perl Compatible Regular Expressions\" (PCRE) as the matching engine."
msgstr ""

#: ../source/reference/operator/query/regex.txt:31
# f24222880d934f3d961709eff2417efd
msgid ":query:`$regex` provides four option flags:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:33
# 1ff318e0014a48f38c6ddbe6aadde499
msgid "``i`` toggles case insensitivity, and allows all letters in the pattern to match upper and lower cases."
msgstr ""

#: ../source/reference/operator/query/regex.txt:36
# cbebe7f378df435d9eee6f63a7358351
msgid "``m`` toggles multiline regular expression. Without this option, all regular expression match within one line."
msgstr ""

#: ../source/reference/operator/query/regex.txt:39
# 2dd057ccf71f4765b099808aa2ff3323
msgid "If there are no newline characters (e.g. ``\\n``) or no start/end of line construct, the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:42
# f57348891dc34dad9e4638b945b5ed0e
msgid "``x`` toggles an \"extended\" capability. When set, :query:`$regex` ignores all white space characters unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:46
# b193974e1a3249f1bf31ca3c7148cc44
msgid "Additionally, it ignores characters between an un-escaped ``#`` character and the next new line, so that you may include comments in complicated patterns. This only applies to data characters; white space characters may never appear within special character sequences in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:52
# 4113e0aca40e4458a7afccd43ee9586b
msgid "The ``x`` option does not affect the handling of the VT character (i.e. code 11.)"
msgstr ""

#: ../source/reference/operator/query/regex.txt:57
# ce92d6b73efe43589f5f976f6b98409a
msgid "``s`` allows the dot (e.g. ``.``) character to match all characters *including* newline characters."
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
# ff53687298f74d648bdf7ba9e988219d
msgid ":query:`$regex` only provides the ``i`` and ``m`` options for the native JavaScript regular expression objects (e.g. ``/acme.*corp/i``). To use ``x`` and ``s`` you must use the \":query:`$regex`\" operator with the \":operator:`$options`\" syntax."
msgstr ""

#: ../source/reference/operator/query/regex.txt:65
# fd5f10ffbed94533b48e27855766552a
msgid "To combine a regular expression match with other operators, you need to use the \":query:`$regex`\" operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
# d1a9cf5a0e66425f85e849d1cf237d3f
msgid "This expression returns all instances of ``field`` in ``collection`` that match the case insensitive regular expression ``acme.*corp`` that *don't* match ``acmeblahcorp``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:76
# 88e8e17a98dd4b6e8c6284f1c6e62b67
msgid "If an index exists for the field, then MongoDB matches the regular expression against the values in the index, which can be faster than a collection scan. Further optimization can occur if the regular expression is a \"prefix expression\", which means that all potential matches start with the same string. This allows MongoDB to construct a \"range\" from that prefix and only match against those values from the index that fall within that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:84
# c741fdbb87b0499189b31b3fbdbf9867
msgid "A regular expression is a \"prefix expression\" if it starts with a caret (``^``) or a left anchor (``\\A``), followed by a string of simple symbols. For example, the regex ``/^abc.*/`` will be optimized by matching only against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:89
# 27f7d36268414d57a5ddd68e635ff494
msgid "Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent strings, they have different performance characteristics. All of these expressions use an index if an appropriate index exists; however, ``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after matching the prefix."
msgstr ""

