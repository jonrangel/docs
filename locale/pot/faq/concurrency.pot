# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
# f5deb8ed9cc349418e27834872be7c0c
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:9
# 5dc307cb74d345738b7bad70eac19a1e
msgid "MongoDB allows multiple clients to read and write a single corpus of data using a locking system to ensure that all clients receive the same view of the data *and* to prevent multiple applications from modifying the exact same pieces of data at the same time. Locks help guarantee that all writes to a single document occur either in full or not at all."
msgstr ""

#: ../source/faq/concurrency.txt:16
# fadb4a9255c64a3c9d4e84d7ae1d22b6
msgid "`Presentation on Concurrency and Internals in 2.2 <http://www.mongodb.com/presentations/concurrency-internals-mongodb-2-2>`_"
msgstr ""

#: ../source/faq/concurrency.txt:21
# e54cf55d70454cd6867616bd24a3e119
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:23
# 191eba24b5ae4e12a2c721dd0561d398
msgid "MongoDB uses a readers-writer [#multi-reader-lock-names]_ lock that allows concurrent reads access to a database but gives exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:27
# 2b5ab3f2e8064669a647efa4b3b3ca58
msgid "When a read lock exists, many read operations may use this lock. However, when a write lock exists, a single write operation holds the lock exclusively, and no other read *or* write operations may share the lock."
msgstr ""

#: ../source/faq/concurrency.txt:31
# c716e2ade5bd4e1dba307f09c77c02c9
msgid "Locks are \"writer greedy,\" which means writes have preference over reads. When both a read and write are waiting for a lock, MongoDB grants the lock to the write."
msgstr ""

#: ../source/faq/concurrency.txt:35
# a8dfa8afea064be7a4fd93658383da81
msgid "You may be familiar with a \"readers-writer\" lock as \"multi-reader\" or \"shared exclusive\" lock. See the Wikipedia page on `Readers-Writer Locks <http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for more information."
msgstr ""

#: ../source/faq/concurrency.txt:42
# bcd0c1c03a404f1c897364dfcd93425b
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:46
# 09715a3202a641209d54852d2d35b3cc
msgid "Beginning with version 2.2, MongoDB implements locks on a per-database basis for most read and write operations. Some global operations, typically short lived operations involving multiple databases, still require a global \"instance\" wide lock. Before 2.2, there is only one \"global\" lock per :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:52
# 58ff53bd292e434281e12d87c80960c6
msgid "For example, if you have six databases and one takes a write lock, the other five are still available for read and write."
msgstr ""

#: ../source/faq/concurrency.txt:56
# d6b1479383ae4b77a6fcf8ea6e4f6f66
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:58
# 66bf20b652c34f32865247057292b8b5
msgid "For reporting on lock utilization information on locks, use any of the following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:61
#: ../source/faq/concurrency.txt:157
# b2f2f666763142c3a01f9866ef25e598
# 237d05e3949340308bff731dd8ae7573
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:62
# bffdefea566c4751b9f5c1ca6f57d209
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:63
# 4e777f5c1ce646c59614583352e66436
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:64
# 915a990c73b3479cb38aa9e5a708f6b7
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:65
# 5b913c9f56d04371b6e49a85809fde7a
msgid "the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_"
msgstr ""

#: ../source/faq/concurrency.txt:67
# d88f4adb1b8f4e5fa8f1515a3b567f07
msgid "Specifically, the :data:`~serverStatus.locks` document in the :doc:`output of serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field in the :doc:`current operation reporting </reference/method/db.currentOp>` provides insight into the type of locks and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:73
# f9cfc8d6d9764e64ba7178c372d9d635
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:78
# 4ec885d4a465477092d9fc30fbdf8db1
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:80
# 2f9bd12ff41a4753b924d89856acf129
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:82
# 5803cce613674a66867bced4a0d14a47
msgid "Long running read and write operations, such as queries, updates, and deletes, yield under many conditions. In MongoDB 2.0, operations yielded based on time slices and the number of operations waiting for the actively held lock. After 2.2, more adaptive algorithms allow operations to yield based on predicted disk access (i.e. page faults)."
msgstr ""

#: ../source/faq/concurrency.txt:88
# ee5b3130f4a04cf8be1dfedf4da30bca
msgid "Read and write operations will yield their locks if the :program:`mongod` receives a :term:`page fault` *or* fetches data that is unlikely to be in memory. Yielding allows other operations that only need to access documents that are already in memory to complete while :program:`mongod` loads documents into memory."
msgstr ""

#: ../source/faq/concurrency.txt:95
# 45cd39a771414b9a9727f408632896a5
msgid "Additionally, write operations that affect multiple documents (i.e. :method:`~db.collection.update()` with the ``multi`` parameter) will yield periodically to allow read operations during these long write operations. Similarly, long running read locks will yield periodically to ensure that write operations have the opportunity to complete."
msgstr ""

#: ../source/faq/concurrency.txt:102
# 490876e559b04ccc91b1e861f39b8c43
msgid "The use of yielding expanded greatly in MongoDB 2.2. Including the \"yield for page fault.\" MongoDB tracks the contents of memory and predicts whether data is available before performing a read. If MongoDB predicts that the data is not in memory a read operation yields its lock while MongoDB loads the data to memory. Once data is available in memory, the read will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:114
# b46c006895b04d45a29c1d394ae29080
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:118
# e83bd154249e4529bf01d00fc27e7e48
msgid "The following table lists common database operations and the types of locks they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
# 05e667ae01e64bafa0e550b4c8df37ca
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
# 2d55de68f6a2430cb8944333295acf75
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
# 44a398003b3e4a80a94c77fe03d7d198
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:55
# e795bbabaee34dadb6fbae0f8e9b60da
# 7c96e22bbd5743d9aacdfb419069d019
# b25a693cba634543998e80dd5f6ee329
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
# 65e42deceded4ff6802744bf7d32b7e7
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
# 75760301cde34a269612a0cff72089e0
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
# 03b364123bee4376b0aa5b0c3bdba3cf
# bd2cae1c87494a70a97e446ade4f766a
# 959bc4d38cb54f10ba0479ba23fc1ed1
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
# b4d5d041db5b49258949ba6d3bc9dbd8
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
# 32ab8b70a9c94902a265aa797b9218bb
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
# 86a6cb6b2af74839bb32ab62ec647745
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
# 596d9ca814b9469ba95a8b2ac0bfa255
msgid "Read lock and write lock, unless operations are specified as non-atomic. Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
# 7f225323314c4a8388e81160b744b14b
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
# 64b094c65c3248e598569e48317892e8
msgid "Building an index in the foreground, which is the default, locks the database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
# 244b3eb888434a959d72339432f0153f
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:42
# eea9ac3408b04100938b79930a2e49d5
msgid "Write lock. :method:`db.eval()` blocks all other JavaScript processes."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:46
# 51bbf4e59d3b4083b6d3c7e25d03f5f9
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:48
# ed643518790543efa10821e8e604d265
msgid "Write lock. If used with the ``nolock`` lock option, the :dbcommand:`eval` option does not take a write lock and cannot write data to the database."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:53
# ed3e4d96bceb4b0caeae2826aa09ebd4
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:127
# ac8c7492412343f78d9d24d2200fe704
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:129
# a44cbd8dc565441d952b3c28c9585a52
msgid "Certain administrative commands can exclusively lock the database for extended periods of time. In some deployments, for large databases, you may consider taking the :program:`mongod` instance offline so that clients are not affected. For example, if a :program:`mongod` is part of a :term:`replica set`, take the :program:`mongod` offline and let other members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:136
# f90d1632c5a24b639f9b71b925cd274c
msgid "The following administrative operations require an exclusive (i.e. write) lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:139
# 5624217a913744b79d4a850f2ea03125
msgid ":method:`db.collection.ensureIndex()`, when issued *without* setting ``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:141
# 169f7a7160934ceb88e889884c0a4de3
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:142
# 0b503bfb967d41d8b6912bf2e2d47adf
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:143
# ef48c95761904057ad4399c86c5e3307
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:144
# bf414d92358849168fbbf61b704f1b5c
msgid ":method:`db.createCollection()`, when creating a very large (i.e. many gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:146
# d5b9c42817f349fab9d2aa6a7c0e010b
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:147
# 599e18c030574926921abd93014eeab3
msgid ":method:`db.copyDatabase()`. This operation may lock all databases. See :ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:150
# d668e1da4f6d41ee823e9549f6ebe6e8
msgid "The following administrative commands lock the database but only hold the lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:153
# 71c01a7f0a93405bb5eb0bdd6689eb4f
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:154
# ef0b84e9029f474f99bc58c934e6c699
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:155
# d015b7fc8fd4409d837a8af873f3e7cc
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:156
# 3fff6a85cf024767bf251e014a48fbc3
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:158
# 2c708c2ec72b4172bb7a2084cb235ed0
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:159
# d121db69a69b4e9bbfdbd641df9fabca
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:164
# 80da7c87117c4256b7dedaed3a9bdeef
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:166
# 87029a088aee43de95582bacf7bf7093
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:168
# bb0cb4b7b4eb49c7846fe62532d853bc
msgid ":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance at once."
msgstr ""

#: ../source/faq/concurrency.txt:171
# 0b2e3be3abe143b3b275f3703c204d84
msgid ":term:`Journaling <journal>`, which is an internal operation, locks all databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:175
# ebfd3e4d9ef04fc3b187debe0848dce1
msgid ":doc:`User authentication </core/authentication>` locks the ``admin`` database as well as the database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:178
# b2aa48eddcd542b5a150a7ae4378b586
msgid "All writes to a replica set's :term:`primary` lock both the database receiving the writes and then the ``local`` database for a short time. The lock for the ``local`` database allows the :program:`mongod` to write to the primary's :term:`oplog` and accounts for a small portion of the total time of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:185
# 883a281b4b1d443f855a3d4075689e09
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:187
# 26f60c548b4a4b1682395f2b0c222fd7
msgid ":term:`Sharding <sharding>` improves concurrency by distributing collections over multiple :program:`mongod` instances, allowing shard servers (i.e. :program:`mongos` processes) to perform any number of operations concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/faq/concurrency.txt:193
# 8dedab74528c484685bb6ff33b18ca90
msgid "Each :program:`mongod` instance is independent of the others in the shard cluster and uses the MongoDB :ref:`readers-writer lock <faq-concurrency-locking>`. The operations on one :program:`mongod` instance do not block the operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:201
# 36caf8ffce164146addf38d1a1dd627d
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:203
# 5f5ac81c312049ba9cb99fec3df4e1aa
msgid "In :term:`replication`, when MongoDB writes to a collection on the :term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which is a special collection in the ``local`` database.  Therefore, MongoDB must lock both the collection's database and the ``local`` database. The :program:`mongod` must lock both databases at the same time to keep the database consistent and ensure that write operations, even with replication, are \"all-or-nothing\" operations."
msgstr ""

#: ../source/faq/concurrency.txt:212
# b14cb339997344b1bb9f408b71dbd333
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:214
# a8bcf6e5ff4e4a418f49e9eff50b771d
msgid "In :term:`replication`, MongoDB does not apply writes serially to :term:`secondaries <secondary>`. Secondaries collect oplog entries in batches and then apply those batches in parallel. Secondaries do not allow reads while applying the write operations, and apply write operations in the order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:220
# ef4ad20b3b194bc291b58a490d1e918a
msgid "MongoDB can apply several writes in parallel on replica set secondaries, in two phases:"
msgstr ""

#: ../source/faq/concurrency.txt:223
# 6044731c0374483e99613401eb9c1808
msgid "During the first *prefer* phase, under a read lock, the :program:`mongod` ensures that all documents affected by the operations are in memory. During this phase, other clients may execute queries against this member."
msgstr ""

#: ../source/faq/concurrency.txt:228
# 67b42e92694e48c0a72b4940245c8543
msgid "A thread pool using write locks applies all write operations in the batch as part of a coordinated write phase."
msgstr ""

#: ../source/faq/concurrency.txt:232
# fc9526a273e3458f860fa2cdd72e667d
msgid "What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""

#: ../source/faq/concurrency.txt:234
# 840225708cae403db090918432077a81
msgid "The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations to run at the same time. Prior to 2.4, a single :program:`mongod` could only run a *single* JavaScript operation at once."
msgstr ""

