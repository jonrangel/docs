# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-introduction.txt:6
# f7dff6d3655348a79b31302c9c97b3f2
msgid "Write Operations Overview"
msgstr ""

#: ../source/core/write-operations-introduction.txt:10
# 7012e69d166b4610a5d2c6cd8c1b3441
msgid "A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single :term:`collection`. All write operations in MongoDB are atomic on the level of a single :term:`document`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:15
# 7dd4d27afaa34a07b2312d6df6289a8c
msgid "There are three classes of write operations in MongoDB: insert, update, and remove. Insert operations add new data to a collection. Update operations modify existing data, and remove operations delete data from a collection. No insert, update, or remove can affect more than one document atomically."
msgstr ""

#: ../source/core/write-operations-introduction.txt:21
# f256b0fbb84243b9b5e0a9e9ff0cac8b
msgid "For the update and remove operations, you can specify criteria, or conditions, that identify the documents to update or remove. These operations use the same query syntax to specify the criteria as :doc:`read operations </core/read-operations>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:26
# 65735272132d416d8c6b0463f42a90a9
msgid "After issuing these modification operations, MongoDB allows applications to determine the level of acknowledgment returned from the database. See :doc:`/core/write-concern`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:32
# 7e67be641f5f482c972b87eadd6320ec
msgid "Create"
msgstr ""

#: ../source/core/write-operations-introduction.txt:34
# 8badcbefa2784792bb05e2f8329183d9
msgid "Create operations add new :term:`documents <document>` to a collection. In MongoDB, the :method:`db.collection.insert()` method perform create operations."
msgstr ""

#: ../source/core/write-operations-introduction.txt:38
# 358ffc1f475841d2bca7ab45bb51d34c
msgid "The following diagram highlights the components of a MongoDB insert operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:43
#: ../source/core/write-operations-introduction.txt:111
#: ../source/core/write-operations-introduction.txt:166
# ff4e31c713d548e79f2feca1d8466234
# b9827a89e2844e6582c6f828666980f4
# 0f6480a505094100b8da3f811797e1ea
msgid "The following diagram shows the same query in SQL:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
#: ../source/core/write-operations-introduction.txt:0
# dc16525bd83e44c3bf9c148ed5d25b98
# 1436423574fd488c9f654905752460b3
# 198bc91cd1c34ac99c054e2d57641b67
msgid "Example"
msgstr ""

#: ../source/core/write-operations-introduction.txt:49
# 04bfd750b81a4036831aae7879078ace
msgid "The following operation inserts a new documents into the ``users`` collection. The new document has four fields ``name``, ``age``, and ``status``, and an ``_id`` field. MongoDB always adds the ``_id`` field to the new document if that field does not exist."
msgstr ""

#: ../source/core/write-operations-introduction.txt:64
# 40e350819c5540838afaad0c8f573f74
msgid "For more information, see :method:`db.collection.insert()` and :doc:`/tutorial/insert-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:67
# 734a3a2800bd491ab5011ffdbea390ce
msgid "Some updates also create records. If an update operation specifies the :term:`upsert` flag *and* there are no documents that match the query portion of the update operation, then MongoDB will convert the update into an insert."
msgstr ""

#: ../source/core/write-operations-introduction.txt:72
# 56a0f0b2932f4d0fa21987ff0a7c7fbc
msgid "With an :term:`upsert`, applications can decide between performing an update or an insert operation using just a single call. Both the :method:`~db.collection.update()` method and the :method:`~db.collection.save()` method can perform an :term:`upsert`. See :method:`~db.collection.update()` and :method:`~db.collection.save()` for details on performing an :term:`upsert` with these methods."
msgstr ""

#: ../source/core/write-operations-introduction.txt:0
# 3e31691c7b0f4267a9e9abaf4d578b28
msgid "See"
msgstr ""

#: ../source/core/write-operations-introduction.txt:84
# 5d5d22e359f848dbbc5f3a69ede2b2dc
msgid "Insert Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:86
# 7d9680fbbb6945baa645a32327d5b506
msgid "If you add a new document *without* the :term:`_id` field, the client library or the :program:`mongod` instance adds an ``_id`` field and populates the field with a unique :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:90
# 210fce5e35d04b73a1a5f009618e09c1
msgid "If you specify the ``_id`` field, the value must be unique within the collection. For operations with :ref:`write concern <write-concern>`, if you try to create a document with a duplicate ``_id`` value, :program:`mongod` returns a duplicate key exception."
msgstr ""

#: ../source/core/write-operations-introduction.txt:96
# 4806a946493444ad807e2d553da94357
msgid "Update"
msgstr ""

#: ../source/core/write-operations-introduction.txt:98
# 24279b77f87f4d21a4fdc1e7af4efa52
msgid "Update operations modify existing :term:`documents <document>` in a :term:`collection`. In MongoDB, :method:`db.collection.update()` and the :method:`db.collection.save()` methods perform update operations. The :method:`db.collection.update()` method can accept query criteria to determine which documents to update as well as an option to update multiple rows. The method can also accept options that affect its behavior such as the ``multi`` option to update multiple documents."
msgstr ""

#: ../source/core/write-operations-introduction.txt:106
# 446e6234b57141e5b0c30a6218e606f8
msgid "The following diagram highlights the components of a MongoDB update operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:125
# 71ee295adff2403aa0c2ecf01c07cb7d
msgid "This update operation on the ``users`` collection sets the ``status`` field to ``A`` for the documents that match the criteria of ``age`` greater than ``18``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:129
# ecb84141b59546379e1b9ff42fcafba3
msgid "For more information, see :method:`db.collection.update()` and :method:`db.collection.save()`, and :doc:`/tutorial/modify-documents` for examples."
msgstr ""

#: ../source/core/write-operations-introduction.txt:136
# 860cfea35d434330a95d25e45ee65858
msgid "Update Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:138
# a57215d31f6c469b99f9c9ae1a8059c9
msgid "By default, the :method:`db.collection.update()` method updates a **single** document. However, with the ``multi`` option, :method:`~db.collection.update()` can update all documents in a collection that match a query."
msgstr ""

#: ../source/core/write-operations-introduction.txt:143
# ec9a46724d164674b2ff50658ad5c4a0
msgid "The :method:`db.collection.update()` method either updates specific fields in the existing document or replaces the document. See :method:`db.collection.update()` for details."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:1
# b9d6d948a2dc44068ad5a10e4dfeeb29
msgid "When performing update operations that increase the document size beyond the allocated space for that document, the update operation relocates the document on disk."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:7
# 62927f2e638749aaa24266fed4646fac
msgid "MongoDB preserves the order of the document fields following write operations *except* for the following cases:"
msgstr ""

#: ../source/includes/fact-update-field-order.rst:10
# 96dae4a6567c47869c94fc64889537cc
msgid "The ``_id`` field is always the first field in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:12
# 10f92c9516004a93a5d21a26616ef430
msgid "Updates that include :update:`renaming <$rename>` of field names may result in the reordering of fields in the document."
msgstr ""

#: ../source/includes/fact-update-field-order.rst:17
# 4b1c7cb2845c423c8811493406394c70
msgid "Starting in version 2.6, MongoDB actively attempts to preserve the field order in a document. Before version 2.6, MongoDB did not actively preserve the order of the fields in a document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:149
# f71b669839f748fd9c7cf11058b92d84
msgid "The :method:`db.collection.save()` method replaces a document and can only update a single document. See :method:`db.collection.save()` and :doc:`/tutorial/insert-documents` for more information"
msgstr ""

#: ../source/core/write-operations-introduction.txt:154
# 9f5a36cf8f714ffd9c55e0373469d696
msgid "Delete"
msgstr ""

#: ../source/core/write-operations-introduction.txt:156
# ed28b47c4e4a488d92bfcbaff7c80f1a
msgid "Delete operations remove documents from a collection. In MongoDB, :method:`db.collection.remove()` method performs delete operations. The :method:`db.collection.remove()` method accepts a query criteria to determine which documents to remove."
msgstr ""

#: ../source/core/write-operations-introduction.txt:161
# d0210c94c4cb41edac2c42f4c470b333
msgid "The following diagram highlights the components of a MongoDB remove operation:"
msgstr ""

#: ../source/core/write-operations-introduction.txt:178
# 5a36aa5b7a0f418e8c39dfa0a099bdec
msgid "This delete operation on the ``users`` collection removes all documents that match the criteria of ``status`` equal to ``D``."
msgstr ""

#: ../source/core/write-operations-introduction.txt:181
# fc25f26e52ba4792b5052f2b994b1cc8
msgid "For more information, see :method:`db.collection.remove()` method and :doc:`/tutorial/remove-documents`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:185
# 87de168b503e41dd953f58c1ad981523
msgid "Remove Behavior"
msgstr ""

#: ../source/core/write-operations-introduction.txt:187
# 6d257f189dc14723a148d802acdd16d7
msgid "By default, :method:`db.collection.remove()` method removes all documents that match its query. However, the method can accept a flag to limit the delete operation to a single document."
msgstr ""

#: ../source/core/write-operations-introduction.txt:194
# fefe60d2eec24133a0cfcb7a70db3761
msgid "Isolation of Write Operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:196
# deba503de12a49ce8ea37f7c135b7c75
msgid "The modification of a single document is always atomic, even if the write operation modifies multiple sub-documents *within* that document. For write operations that modify multiple documents, the operation as a whole is not atomic, and other operations may interleave."
msgstr ""

#: ../source/core/write-operations-introduction.txt:202
# 7244dd9124e24d1381d2984711f933fb
msgid "No other operations are atomic. You can, however, attempt to isolate a write operation that affects multiple documents using the :doc:`isolation operator </reference/operator/update/isolated>`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:206
# cebadf871fb5448d9ef008d63cb2341a
msgid "To isolate a sequence of write operations from other read and write operations, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations-introduction.txt:1
#: ../source/core/write-operations-introduction.txt:2
# 96a8e0cc9c62454eb7752291ef4d6f6a
# 3cd930c62eaa407bb0dbd4fdcfd0ba1b
msgid "write operations"
msgstr ""

#: ../source/core/write-operations-introduction.txt:2
# 3cd930c62eaa407bb0dbd4fdcfd0ba1b
msgid "crud"
msgstr ""

