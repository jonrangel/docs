# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/storage.txt:3
# 57071c74ced7460f87ee35548e32ea8a
msgid "Storage"
msgstr ""

#: ../source/core/storage.txt:8
# bcee5dd21cb142df9dc7dc98e7392183
msgid "Data Model"
msgstr ""

#: ../source/core/storage.txt:10
# a24d532d3efb42d2a2f8ce458972819c
msgid "MongoDB stores data in the form of :term:`BSON` documents, which are rich mappings of keys, or field names, to values. BSON supports a rich collection of types, and fields in BSON documents may hold arrays of values or embedded documents. All documents in MongoDB must be less than 16MB, which is the :limit:`BSON document size <BSON Document Size>`."
msgstr ""

#: ../source/core/storage.txt:16
# 3f9513d797f74ca1b82007e297c513c1
msgid "Every document in MongoDB is stored in a *record* which contains the document itself and extra space, or :term:`padding`, which allows the document to grow as the result of updates."
msgstr ""

#: ../source/core/storage.txt:20
# f74bb954bae440c09e11c469e53ef393
msgid "All records are contiguously located on disk, and when a document becomes larger than the allocated record, MongoDB must allocate a new record. New allocations require MongoDB to move a document and update all indexes that refer to the document, which takes more time than in-place updates and leads to storage fragmentation."
msgstr ""

#: ../source/core/storage.txt:27
# b5aa21a399b14d558e48639580a3a976
msgid "All records are part of a :term:`collection`, which is a logical grouping of documents in a MongoDB database. The documents in a collection share a set of indexes, and typically these documents share common fields and structure."
msgstr ""

#: ../source/core/storage.txt:32
# 97d4212d8cf740b1b5354cb6e8ab445c
msgid "In MongoDB the :term:`database` construct is a group of related collections. Each database has a distinct set of data files and can contain a large number of collections. Also, each database has one distinct write lock, that blocks operations to the database during write operations. A single MongoDB deployment may have many databases."
msgstr ""

#: ../source/core/storage.txt:40
# 81fcb505f76647b0bca92fbce67e8903
msgid "Journal"
msgstr ""

#: ../source/core/storage.txt:42
# 15a3d69b12ee4cc6b761fa7eb39bafd9
msgid "In order to ensure that all modifications to a MongoDB data set are durably written to disk, MongoDB records all modifications to a journal that it writes to disk more frequently than it writes the data files. The journal allows MongoDB to successfully recover data from data files after a :program:`mongod` instance exits without flushing all changes."
msgstr ""

#: ../source/core/storage.txt:49
# c7440407ab4e4337b252abae59e367eb
msgid "See :doc:`/core/journaling` for more information about the journal in MongoDB."
msgstr ""

#: ../source/core/storage.txt:55
# 2614d1690bea45bea8ff232441b37aba
msgid "Record Allocation Strategies"
msgstr ""

#: ../source/core/storage.txt:57
# 56704d0834884adbbe3e2b88d6aaf244
msgid "MongoDB supports multiple record allocation strategies that determine how :program:`mongod` adds padding to a document when creating a :term:`record`. Because documents in MongoDB may grow after insertion and all records are contiguous on disk, the padding can reduce the need to relocate documents on disk following updates. Relocations are less efficient than in-place updates, and can lead to storage fragmentation. As a result, all padding strategies trade additional space for increased efficiency and decreased fragmentation."
msgstr ""

#: ../source/core/storage.txt:66
# 35abccd92c0f42d09421daaf3fb258fb
msgid "Different allocation strategies support different kinds of workloads: the :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for insert/update/delete workloads; while :ref:`exact fit allocations <exact-fit-allocation>` is ideal for collections *without* update and delete workloads."
msgstr ""

#: ../source/core/storage.txt:75
# 0b78a919ad0b442c9b010dc755359c02
msgid "Power of 2 Sized Allocations"
msgstr ""

#: ../source/core/storage.txt:77
# ce93130b8a7c457997eb1c7bbda5ef40
msgid "For all new collections, :collflag:`usePowerOf2Sizes` became the default allocation strategy. To change the default allocation strategy, use the :parameter:`newCollectionsUsePowerOf2Sizes` parameter."
msgstr ""

#: ../source/core/storage.txt:82
# b71ffab07f0b4c58b79a7eebadf6b376
msgid ":program:`mongod` uses an allocation strategy called :collflag:`usePowerOf2Sizes` where each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, 256, 512...16777216.) The smallest allocation for a document is 32 bytes. The power of 2 sizes allocation strategy has two key properties:"
msgstr ""

#: ../source/core/storage.txt:88
# 1195e862696b4585a6aa119e16f0aa7a
msgid "there are a limited number of record allocation sizes, which makes it easier for :program:`mongod` to reuse existing allocations, which will reduce fragmentation in some cases."
msgstr ""

#: ../source/core/storage.txt:92
# 6c1bb561d0994b9b9815499089f1f522
msgid "in many cases, the record allocations are significantly larger than the documents they hold. This allows documents to grow while minimizing or eliminating the chance that the :program:`mongod` will need to allocate a new record if the document grows."
msgstr ""

#: ../source/core/storage.txt:97
# d1ab57ce0d534d418be0583cab43e4a1
msgid "The :collflag:`usePowerOf2Sizes` strategy does not *eliminate* document reallocation as a result of document growth, but it minimizes its occurrence in many common operations."
msgstr ""

#: ../source/core/storage.txt:104
# 8a958572e334499ba2c437831c78ba14
msgid "Exact Fit Allocation"
msgstr ""

#: ../source/core/storage.txt:106
# 4c3e326c149b4c66ac43956615491deb
msgid "The exact fit allocation strategy allocates record sizes based on the size of the document and an additional *padding factor*. Each collection has its own padding factor, which defaults to ``0`` when you insert the first document in a collection, and may grow incrementally to ``2`` as as documents grow as a result of updates."
msgstr ""

#: ../source/core/storage.txt:112
# 6e62e7b469254d4aab940fc946f66215
msgid "Multiply the size of a document by the padding factor to determine the total record size. That is:"
msgstr ""

#: ../source/core/storage.txt:119
# 36d58b4d57f24905be141b4600f7e061
msgid "The size of each record in a collection reflects the size of the padding factor at the time of allocation. See the :data:`~collStats.paddingFactor` field in the output of :method:`db.collection.stats()` to see the current padding factor for a collection."
msgstr ""

#: ../source/core/storage.txt:125
# 2836ac42ef4c440cb718b0e43474a834
msgid "On average, this exact fit allocation strategy uses less storage space than the :collflag:`usePowerOf2Sizes` strategy but will result in higher levels of storage fragmentation if documents grow beyond the size of their initial allocation."
msgstr ""

#: ../source/core/storage.txt:130
# 87909d256b7345628c6a54db28ba72a7
msgid "The :dbcommand:`compact` and :dbcommand:`repairDatabase` operations remove padding by default, as do the :program:`mongodump` and :program:`mongorestore`. :dbcommand:`compact` does allow you to specify a padding for records during compaction."
msgstr ""

#: ../source/core/storage.txt:136
# 3cdac6e61474498989efdb117fed5475
msgid "Capped Collections"
msgstr ""

#: ../source/core/storage.txt:138
# 47cd9806c4a248389d5438ddf13fd728
msgid ":term:`Capped collections <capped collection>` are fixed-size collections that support high-throughput operations that store records in insertion order. Capped collections work like circular buffers: once a collection fills its allocated space, it makes room for new documents by overwriting the oldest documents in the collection."
msgstr ""

#: ../source/core/storage.txt:144
# fd03f499b7ba481cad994a0bdc2f068a
msgid "See :doc:`/core/capped-collections` for more information."
msgstr ""

