# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-operations.txt:3
# f14076a40ed7482fbcf10ab9a9628c1a
msgid "Operational Factors and Data Models"
msgstr ""

#: ../source/core/data-model-operations.txt:7
# dd06504f1172476486ca2536f4c9a763
msgid "Modeling application data for MongoDB depends on both the data itself, as well as the characteristics of MongoDB itself. For example, different data models may allow applications to use more efficient queries, increase the throughput of insert and update operations, or distribute activity to a sharded cluster more effectively."
msgstr ""

#: ../source/core/data-model-operations.txt:13
# 39804f49724b483285f1e71c983485f9
msgid "These factors are *operational* or address requirements that arise outside of the application but impact the performance of MongoDB based applications. When developing a data model, analyze all of your application's :doc:`read operations </core/read-operations>` and :doc:`write operations </core/write-operations>` in conjunction with the following considerations."
msgstr ""

#: ../source/core/data-model-operations.txt:23
# e513be50123b41798716e6159da8439e
msgid "Document Growth"
msgstr ""

#: ../source/core/data-model-operations.txt:25
# 468c652573f042cd8c51ced4501ea85e
msgid "Some updates to documents can increase the size of documents. These updates include pushing elements to an array (i.e. :update:`$push`) and adding new fields to a document. If the document size exceeds the allocated space for that document, MongoDB will relocate the document on disk. Relocating documents takes longer than *in place updates* and can lead to fragmented storage. Although MongoDB automatically :ref:`adds padding to document allocations <record-allocation-stratgies>` to minimize the likelihood of relocation, data models should avoid document growth when possible."
msgstr ""

#: ../source/core/data-model-operations.txt:35
# 3afc6cb77214444cb8ff51245515af0d
msgid "For instance, if your applications require updates that will cause document growth, you may want to refactor your data model to use references between data in distinct documents rather than a denormalized data model."
msgstr ""

#: ../source/core/data-model-operations.txt:40
# bbc7429c52734b0ca4fcd1d615026b03
msgid "MongoDB adaptively adjusts the amount of automatic padding to reduce occurrences of relocation. You may also use a *pre-allocation* strategy to explicitly avoid document growth. Refer to the :ecosystem:`Pre-Aggregated Reports Use Case </use-cases/pre-aggregated-reports>` for an example of the *pre-allocation* approach to handling document growth."
msgstr ""

#: ../source/core/data-model-operations.txt:47
# e89a437e3d7f49b3becf1c5772c13ef2
msgid "See :doc:`/core/storage` for more information on MongoDB's storage model and record allocation strategies."
msgstr ""

#: ../source/core/data-model-operations.txt:54
# 2fac3cab68ae4c80a566808c5d69584e
msgid "Atomicity"
msgstr ""

#: ../source/core/data-model-operations.txt:56
# ae6124ad6f2c4f489bff1715a108f194
msgid "In MongoDB, operations are atomic at the :term:`document` level. No **single** write operation can change more than one document. Operations that modify more than a single document in a collection still operate on one document at a time. [#record-atomicity]_ Ensure that your application stores all fields with atomic dependency requirements in the same document. If the application can tolerate non-atomic updates for two pieces of data, you can store these data in separate documents."
msgstr ""

#: ../source/core/data-model-operations.txt:65
# 2b19e9a31c4c4b01b2be0fa42157f47c
msgid "A data model that embeds related data in a single document facilitates these kinds of atomic operations. For data models that store references between related pieces of data, the application must issue separate read and write operations to retrieve and modify these related pieces of data."
msgstr ""

#: ../source/core/data-model-operations.txt:71
# 4b1834b946674518b90eebd8e2e7f597
msgid "See :ref:`data-modeling-atomic-operation` for an example data model that provides atomic updates for a single document."
msgstr ""

#: ../source/core/data-model-operations.txt:74
# 236516daec9e4edca6cae4f283ee9fbd
msgid "Document-level atomic operations include all operations within a single MongoDB document record: operations that affect multiple sub-documents within that single record are still atomic."
msgstr ""

#: ../source/core/data-model-operations.txt:80
# abf5cfa786244d6d93080d7c397c6e9d
msgid "Sharding"
msgstr ""

#: ../source/core/data-model-operations.txt:82
# 0f1c46264b894707a5c3a4a88b64987e
msgid "MongoDB uses :term:`sharding` to provide horizontal scaling. These clusters support deployments with large data sets and high-throughput operations. Sharding allows users to :term:`partition` a :term:`collection` within a database to distribute the collection's documents across a number of :program:`mongod` instances or :term:`shards <shard>`."
msgstr ""

#: ../source/core/data-model-operations.txt:89
# faf0cfc9bb6b4a519232a419f554f05e
msgid "To distribute data and application traffic in a sharded collection, MongoDB uses the :ref:`shard key <shard-key>`. Selecting the proper :ref:`shard key <shard-key>` has significant implications for performance, and can enable or prevent query isolation and increased write capacity. It is important to consider carefully the field or fields to use as the shard key."
msgstr ""

#: ../source/core/data-model-operations.txt:96
# 1d0e0d83902b45eab5f065ddbd217c30
msgid "See :doc:`/core/sharding-introduction` and :doc:`/core/sharding-shard-key` for more information."
msgstr ""

#: ../source/core/data-model-operations.txt:100
# 6cf286141d2c4bf6ad544225faae32b7
msgid "Indexes"
msgstr ""

#: ../source/core/data-model-operations.txt:102
# c4ec41b3e83749eaa0cc0dbe4895e8c3
msgid "Use indexes to improve performance for common queries. Build indexes on fields that appear often in queries and for all operations that return sorted results. MongoDB automatically creates a unique index on the ``_id`` field."
msgstr ""

#: ../source/core/data-model-operations.txt:107
# f54f2a9ad20e41af87e0991f0128f3b3
msgid "As you create indexes, consider the following behaviors of indexes:"
msgstr ""

#: ../source/core/data-model-operations.txt:109
# 72231468638344049cea37901bc98b8c
msgid "Each index requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:111
# 8a95b086358b4b81b646e64b5967dbd5
msgid "Adding an index has some negative performance impact for write operations. For collections with high write-to-read ratio, indexes are expensive since each insert must also update any indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:115
# 05e68b2601d742028b516d4a80acaad6
msgid "Collections with high read-to-write ratio often benefit from additional indexes. Indexes do not affect un-indexed read operations."
msgstr ""

#: ../source/core/data-model-operations.txt:118
# ade269abce404e31952d1ed33eaef26d
msgid "When active, each index consumes disk space and memory. This usage can be significant and should be tracked for capacity planning, especially for concerns over working set size."
msgstr ""

#: ../source/core/data-model-operations.txt:122
# b347391d6c0f4815b4f9e3899d0d698d
msgid "See :doc:`/applications/indexes` for more information on indexes as well as :doc:`/tutorial/analyze-query-plan/`. Additionally, the MongoDB :doc:`database profiler </tutorial/manage-the-database-profiler>` may help identify inefficient queries."
msgstr ""

#: ../source/core/data-model-operations.txt:130
# 87fe1d3332af44e58acc2e945ed63d02
msgid "Large Number of Collections"
msgstr ""

#: ../source/core/data-model-operations.txt:132
# c3f260f33ef54976aa5c2a431741c974
msgid "In certain situations, you might choose to store related information in several collections rather than in a single collection."
msgstr ""

#: ../source/core/data-model-operations.txt:135
# 82fc7a0c6070408ca0fec2e655f8ba7d
msgid "Consider a sample collection ``logs`` that stores log documents for various environment and applications. The ``logs`` collection contains documents of the following form:"
msgstr ""

#: ../source/core/data-model-operations.txt:144
# 1fc0250d9ed24f839ac78db24147d080
msgid "If the total number of documents is low, you may group documents into collection by type. For logs, consider maintaining distinct log collections, such as ``logs.dev`` and ``logs.debug``. The ``logs.dev`` collection would contain only the documents related to the dev environment."
msgstr ""

#: ../source/core/data-model-operations.txt:150
# 63d089aadd5f48b5ad69038e0340a45f
msgid "Generally, having a large number of collections has no significant performance penalty and results in very good performance. Distinct collections are very important for high-throughput batch processing."
msgstr ""

#: ../source/core/data-model-operations.txt:154
# e8b2797d0de1439da9b0f34876fe96e6
msgid "When using models that have a large number of collections, consider the following behaviors:"
msgstr ""

#: ../source/core/data-model-operations.txt:157
# 1413106c08a04db18c322077985311af
msgid "Each collection has a certain minimum overhead of a few kilobytes."
msgstr ""

#: ../source/core/data-model-operations.txt:159
# 00f7f72745a642e78d8f4d28b33d7c1c
msgid "Each index, including the index on ``_id``, requires at least 8KB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:162
# ea25c6ecc5bd4333a869258996532cba
msgid "For each :term:`database`, a single namespace file (i.e. ``<database>.ns``) stores all meta-data for that database, and each index and collection has its own entry in the namespace file. MongoDB places :limit:`limits on the size of namespace files <Size of Namespace File>`."
msgstr ""

#: ../source/core/data-model-operations.txt:168
# e500fa36f29e4b1ea21913ba396a8b18
msgid "MongoDB has :limit:`limits on the number of namespaces <Number of Namespaces>`. You may wish to know the current number of namespaces in order to determine how many additional namespaces the database can support. To get the current number of namespaces, run the following in the :program:`mongo` shell:"
msgstr ""

#: ../source/core/data-model-operations.txt:180
# b22716f4be444370aceb2d8589eb5f69
msgid "The limit on the number of namespaces depend on the ``<database>.ns`` size. The namespace file defaults to 16 MB."
msgstr ""

#: ../source/core/data-model-operations.txt:183
# ae287cd6e7574ec885ec1c2c8c102de7
msgid "To change the size of the *new* namespace file, start the server with the option :option:`--nssize \\<new size MB\\> <--nssize>`. For existing databases, after starting up the server with :option:`--nssize`, run the :method:`db.repairDatabase()` command from the :program:`mongo` shell. For impacts and considerations on running :method:`db.repairDatabase()`, see :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/core/data-model-operations.txt:192
# f1194abdcdad498095a4f9a9fcd266cf
msgid "Data Lifecycle Management"
msgstr ""

#: ../source/core/data-model-operations.txt:194
# 853f694f41c7479b9acaa1f9a43d1527
msgid "Data modeling decisions should take data lifecycle management into consideration."
msgstr ""

#: ../source/core/data-model-operations.txt:197
# 845eba8d052c475faca7a7ea53b526e0
msgid "The :doc:`Time to Live or TTL feature </tutorial/expire-data>` of collections expires documents after a period of time. Consider using the TTL feature if your application requires some data to persist in the database for a limited period of time."
msgstr ""

#: ../source/core/data-model-operations.txt:202
# 3961ee91cb3849e694ef634be25d2725
msgid "Additionally, if your application only uses recently inserted documents, consider :doc:`/core/capped-collections`. Capped collections provide *first-in-first-out* (FIFO) management of inserted documents and efficiently support operations that insert and read documents based on insertion order."
msgstr ""

