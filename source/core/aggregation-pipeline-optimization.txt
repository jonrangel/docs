=================================
Aggregation Pipeline Optimization
=================================

.. default-domain:: mongodb

.. versionchanged:: 2.4

Aggregation pipeline operations have an optimization phase which
attempts to rearrange the pipeline for improved performance.

.. _aggregation-pipeline-sequence-optimization:

Pipeline Sequence Optimization
------------------------------

``$sort`` + ``$skip`` + ``$limit`` Sequence Optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you have a sequence with :pipeline:`$sort` followed by a
:pipeline:`$skip` followed by a :pipeline:`$limit`, an
optimization occurs that moves the :pipeline:`$limit` operator before
the :pipeline:`$skip` operator. For example, if the pipeline consists of
the following stages:

.. code-block:: javascript

   { $sort: { age : -1 } },
   { $skip: 10 },
   { $limit: 5 }

During the optimization phase, the optimizer transforms the sequence to
the following:

.. code-block:: javascript

   { $sort: { age : -1 } },
   { $limit: 15 }
   { $skip: 10 }

.. note::

   The :pipeline:`$limit` value has increased to the sum of the
   initial value and the :pipeline:`$skip` value.

The optimized sequence now has :pipeline:`$sort` immediately preceding
the :pipeline:`$limit`. See :pipeline:`$sort` for information on the
behavior of the :pipeline:`$sort` operation when it immediately
precedes :pipeline:`$limit`.

``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence Optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you have a continuous sequence of a :pipeline:`$limit` pipeline
stage followed by a :pipeline:`$skip` pipeline stage, the optimization
phase attempts to arrange the pipeline stages to combine the limits
and skips. For example, if the pipeline consists of the following
stages:

.. code-block:: javascript

   { $limit: 100 },
   { $skip: 5 },
   { $limit: 10},
   { $skip: 2 }

During the intermediate step, the optimizer reverses the position of
the :pipeline:`$skip` followed by a :pipeline:`$limit` to
:pipeline:`$limit` followed by the :pipeline:`$skip`.

.. code-block:: javascript

   { $limit: 100 },
   { $limit: 15},
   { $skip: 5 },
   { $skip: 2 }

The :pipeline:`$limit` value has increased to the sum of the
initial value and the :pipeline:`$skip` value. Then, for the final
:pipeline:`$limit` value, the optimizer selects the minimum between
the adjacent :pipeline:`$limit` values. For the final
:pipeline:`$skip` value, the optimizer adds the adjacent
:pipeline:`$skip` values, to transform the sequence to the
following:

.. code-block:: javascript

   { $limit: 15 },
   { $skip: 7 }

.. _aggregation-pipeline-projection-optimization:

Projection Optimization
-----------------------

The aggregation pipeline can determine if it requires only a subset of
the fields in the documents to obtain the results. If so, the pipeline
will only use those required fields, reducing the amount of data
passing through the pipeline.
