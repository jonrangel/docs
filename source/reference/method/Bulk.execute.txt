==============
Bulk.execute()
==============

.. default-domain:: mongodb

Description
-----------

.. method:: Bulk.execute()

   .. versionadded:: 2.6

   Executes the list of operations built by the :method:`Bulk()`
   operations builder.

   :method:`Bulk.execute()` accepts the following parameter:

   .. include:: /reference/method/Bulk.execute-param.rst

   :returns: A :method:`BulkWriteResult` object that contains the
      status of the operation.

   After execution, you cannot re-execute the :method:`Bulk()`
   object without reinitializing. See
   :method:`db.collection.initializeUnorderedBulkOp()` and
   :method:`db.collection.initializeOrderedBulkOp()`.

Example
-------

The following initializes a :method:`Bulk()` operations builder on the
``items`` collection, adds a series of write operations, and executes
the operations:

.. code-block:: javascript

   var bulk = db.items.initializeOrderedBulkOp();
   bulk.insert( { item: "abc123", status: "A", defaultQty: 500, points: 5 } );
   bulk.insert( { item: "ijk123", status: "A", defaultQty: 100, points: 10 } );
   bulk.find( { status: "D" } ).removeOne();
   bulk.find( { status: "D" } ).update( { $set: { points: 0 } } );
   bulk.execute();

The operation returns the following :method:`BulkWriteResult()` object:

.. code-block:: javascript

   BulkWriteResult({
      "writeErrors" : [ ],
      "writeConcernErrors" : [ ],
      "nInserted" : 2,
      "nUpserted" : 0,
      "nMatched" : 3,
      "nModified" : 3,
      "nRemoved" : 1,
      "upserted" : [ ]
   })

For details on the return object, see :method:`BulkWriteResult()`.

.. see:: :method:`Bulk()` for a listing of methods available for bulk
   operations.
