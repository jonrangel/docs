====================
$group (aggregation)
====================

.. default-domain:: mongodb

.. pipeline:: $group

   Groups documents together for the purpose of calculating aggregate
   values based on a collection of documents. In practice,
   :pipeline:`$group` often supports tasks such as average page views
   for each page in a website on a daily basis.

   .. important:: The output of :pipeline:`$group` is not ordered.

   The output of :pipeline:`$group` depends on how you define groups.
   Begin by specifying an identifier (i.e. an ``_id`` field) for the
   group you're creating with this pipeline. For this ``_id`` field,
   you can specify various expressions, including a single field from
   the documents in the pipeline, a computed value from a previous
   stage, a document that consists of multiple fields, and other valid
   expressions, such as constant or subdocument fields. You can use
   :pipeline:`$project` operators in expressions for the ``_id`` field.

   The following example of an ``_id`` field specifies a document that
   consists of multiple fields:

   .. code-block:: javascript

      { $group: { _id : { author: '$author', pageViews: '$pageViews', posted: '$posted' } } }

   Every :pipeline:`$group` expression **must** specify an ``_id``
   field. In addition to the ``_id`` field, :pipeline:`$group`
   expression can include computed fields. These other fields must use
   one of the following :term:`accumulators <accumulator>`:

   - :group:`$addToSet`
   - :group:`$first`
   - :group:`$last`
   - :group:`$max`
   - :group:`$min`
   - :group:`$avg`
   - :group:`$push`
   - :group:`$sum`

   With the exception of the ``_id`` field, :pipeline:`$group` cannot
   output nested documents.

.. tip::

   Use :pipeline:`$project` as needed to rename the grouped field
   after a :pipeline:`$group` operation.

Variables
---------

.. versionchanged:: 2.6

You can use variables in expressions for the :pipeline:`$group` phase.
See :expression:`$let` and :expression:`$map`.

The system variables :variable:`$$CURRENT <CURRENT>` and
:variable:`$$ROOT <ROOT>` are also available directly. See
:ref:`group-stage-pivot-using-ROOT` for an example.

.. _group-memory-limit:

``$group`` Operator and Memory
------------------------------

The :pipeline:`$group` stage has a limit of 100 megabytes of RAM. By
default, if the stage exceeds this limit, :pipeline:`$group` will
produce an error. However, to allow for the handling of large datasets,
set the ``allowDiskUse`` option to ``true`` to enable
:pipeline:`$group` operations to write to temporary files. See the
``allowDiskUse`` option in :method:`db.collection.aggregate()` method
and the :dbcommand:`aggregate` command for details.

.. versionchanged:: 2.6
   MongoDB introduces a limit of 100 megabytes of RAM for the
   :pipeline:`$group` stage.

Examples
--------

Calculate Count and Sum
~~~~~~~~~~~~~~~~~~~~~~~

Consider the following example:

.. code-block:: javascript

   db.article.aggregate(
       { $group : {
           _id : "$author",
           docsPerAuthor : { $sum : 1 },
           viewsPerAuthor : { $sum : "$pageViews" }
       }}
   );

This aggregation pipeline groups by the ``author`` field and computes
two fields, ``docsPerAuthor`` and ``viewsPerAuthor``, per each group.
The ``docsPerAuthor`` field is a counter field that uses the
:group:`$sum` operator to add ``1`` for each document with a given
author. The ``viewsPerAuthor`` field is the sum of the values in the
``pageViews`` field for each group.

Pivot Data
~~~~~~~~~~

A collection ``books`` contains the following documents:

.. code-block:: javascript

   { "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 }
   { "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 }
   { "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 }
   { "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 }
   { "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 }

Group ``title`` by ``author``
`````````````````````````````

The following aggregation operation pivots the data in the ``books``
collection to have titles grouped by authors.

.. code-block:: javascript

   db.books.aggregate(
      [
        { $group : { _id : "$author", books: { $push: "$title" } } }
      ]
   )

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : "Homer", "books" : [ "The Odyssey", "Iliad" ] }
   { "_id" : "Dante", "books" : [ "The Banquet", "Divine Comedy", "Eclogues" ] }

.. _group-stage-pivot-using-ROOT:

Group Documents by ``author``
`````````````````````````````

The following aggregation operation uses the :variable:`$$ROOT <ROOT>`
system variable to group the documents by authors. The resulting
documents must not exceed the :limit:`BSON Document Size` limit.

.. code-block:: javascript

   db.books.aggregate(
      [
        { $group : { _id : "$author", books: { $push: "$$ROOT" } } }
      ]
   )

The operation returns the following documents:

.. code-block:: javascript

   {
     "_id" : "Homer",
     "books" :
        [
          { "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 },
          { "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 }
        ]
   }

   {
     "_id" : "Dante",
     "books" :
        [
          { "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 },
          { "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 },
          { "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 }
        ]
   }

.. seealso:: :ref:`push-with-root`
