=====
$text
=====

.. default-domain:: mongodb

.. query:: $text

   .. versionadded:: 2.6

   :query:`$text` performs a text search on the content of the fields
   indexed with a :doc:`text index </core/index-text>`. A
   :query:`$text` expression has the following syntax:

   .. code-block:: javascript

      { $text: { $search: <string>, $language: <string> } }

   The :query:`$text` operator accepts a text query document with the
   following fields:

   .. |object-behavior| replace:: :ref:`text-query-operator-behavior`

   .. include:: /reference/operator/query/text-fields.rst

   The :query:`$text` operator, by default, does *not* return results
   sorted in terms of the results' score. For more information, see
   the :ref:`text-operator-text-score` documentation.

.. _text-query-operator-behavior:

Behavior
--------

Restrictions
~~~~~~~~~~~~

- A query can specify, at most, one :query:`$text` expression.

- The :query:`$text` query can not appear in :query:`$nor` expressions.

- To use a :query:`$text` query in an :query:`$or` expression, all
  clauses in the :query:`$or` array must be indexed.

- .. include:: /includes/fact-hint-text-query-restriction.rst

- .. include:: /includes/fact-natural-sort-order-text-query-restriction.rst

  .. |operation| replace:: :query:`$text` expression

- .. include:: /includes/fact-special-indexes-and-text.rst

.. |text-object| replace:: :query:`$text`
.. |meta-object| replace:: :projection:`$meta` projection operator
.. |sort-object| replace:: :method:`~cursor.sort()` method

``$search`` Field
~~~~~~~~~~~~~~~~~

In the ``$search`` field, specify a string of words that the
:query:`text` operator parses and uses to query the :doc:`text index
</core/index-text>`. The :query:`text` operator treats most punctuation
in the string as delimiters, except a hyphen ``-`` that negates term or
an escaped double quotes ``\"`` that specifies a phrase.

.. _text-operator-phrases:

Phrases
^^^^^^^

To match on a phrase, as opposed to individual terms, enclose the
phrase in escaped double quotes (``\"``), as in:

.. code-block:: javascript

   "\"ssl certificate\""

If the ``$search`` string includes a phrase and individual terms, text
search will only match the documents that include the phrase. More
specifically, the search performs a logical ``AND`` of the phrase with
the individual terms in the search string.

For example, passed a ``$search`` string:

.. code-block:: javascript

   "\"ssl certificate\" authority key"

The :query:`$text` operator searches for the phrase ``"ssl
certificate"`` **and** (``"authority"`` **or** ``"key"`` **or**
``"ssl"`` **or** ``"certificate"`` ).

.. _text-operator-term-negation:

Negations
^^^^^^^^^

Prefixing a word with a hyphen sign (``-``) negates a word:

- The negated word excludes documents that contain the
  negated word from the result set.

- When passed a search string that only contains negated words, text
  search will not match any documents.

- A hyphenated word, such as ``pre-market``, is not a negation. The
  :query:`$text` operator treats the hyphen as a delimiter.

The :query:`$text` operator adds all negations to the query with the
logical ``AND`` operator.

Match Operation
~~~~~~~~~~~~~~~

The :query:`$text` operator ignores language-specific stop words, such
as ``the`` and ``and`` in English.

The :query:`$text` operator matches on the complete *stemmed* word. So
if a document field contains the word ``blueberry``, a search on the
term ``blue`` will not match. However, ``blueberry`` or ``blueberries``
will match.

For non-diacritics, text search is case insensitive; i.e. case
insensitive for ``[A-z]``.

.. _text-operator-text-score:

Text Score
~~~~~~~~~~

.. include:: /includes/fact-text-search-score.rst

.. _text-query-examples:

Examples
--------

The following examples assume a collection ``articles`` that has a text
index on the field ``subject``:

.. code-block:: javascript

   db.articles.ensureIndex( { subject: "text" } )

Search for a Single Word
~~~~~~~~~~~~~~~~~~~~~~~~

The following query searches for the term ``coffee``:

.. code-block:: javascript

   db.articles.find( { $text: { $search: "coffee" } } )

This query returns documents that contain the term ``coffee`` in the
indexed ``subject`` field.

Match Any of the Search Terms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If the search string is a space-delimited string, :query:`$text`
operator performs a logical ``OR`` search on each term and returns
documents that contains any of the terms.

The following query searches specifies a ``$search`` string of three
terms delimited by space, ``"bake coffee cake"``:

.. code-block:: javascript

   db.articles.find( { $text: { $search: "bake coffee cake" } } )

This query returns documents that contain either ``bake`` **or**
``coffee`` **or** ``cake`` in the indexed ``subject`` field.

Search for a Phrase
~~~~~~~~~~~~~~~~~~~

To match the exact phrase as a single term, escape the quotes.

The following query searches for the phrase ``coffee cake``:

.. code-block:: javascript

   db.articles.find( { $text: { $search: "\"coffee cake\"" } } )

This query returns documents that contain the phrase ``coffee cake``.

.. seealso:: :ref:`text-operator-phrases`

Exclude Documents That Contain a Term
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A *negated* term is a term that is prefixed by a minus sign ``-``. If
you negate a term, the :query:`$text` operator will exclude the
documents that contain those terms from the results.

The following example searches for documents that contain the words
``bake`` or ``coffee`` but do **not** contain the term ``cake``:

.. code-block:: javascript

   db.articles.find( { $text: { $search: "bake coffee -cake" } } )

.. seealso:: :ref:`text-operator-term-negation`

.. _ex-return-text-search-score:

Return the Text Search Score
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following query searches for the term ``cake`` and returns the
score assigned to each matching document:

.. code-block:: javascript

   db.articles.find(
      { $text: { $search: "cake" } },
      { score: { $meta: "textScore" } }
   )

In the result set, the returned documents includes an *additional*
field ``score`` that contains the document's score associated with the
text search. [#meta-aggregation]_

.. seealso:: :ref:`text-operator-text-score`

.. _ex-sort-text-search-score:

Sort by Text Search Score
~~~~~~~~~~~~~~~~~~~~~~~~~

To sort by the text score, include the **same** :projection:`$meta`
expression in **both** the projection document and the sort expression.
[#meta-aggregation]_ The following query searches for the term ``cake``
and sorts the results by the descending score:

.. code-block:: javascript

   db.articles.find(
      { $text: { $search: "cake" } },
      { score: { $meta: "textScore" } }
   ).sort( { score: { $meta: "textScore" } } )

In the result set, the returned documents includes an additional field
``score`` that contains the document's score associated with the text
search.

.. seealso:: :ref:`text-operator-text-score`

.. _ex-sort-limit-three:

Return Top 3 Matching Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the :method:`~cursor.limit()` method in conjunction with a
:method:`~cursor.sort()` to return the top three matching documents.
The following query searches for the term ``cake`` and sorts the
results by the descending score:

.. code-block:: javascript

   db.articles.find(
      { $text: { $search: "cake" } },
      { score: { $meta: "textScore" } }
   ).sort( { score: { $meta: "textScore" } } ).limit(3)

.. seealso:: :ref:`text-operator-text-score`

.. _text-operator-example-compound-sort:

Text Search with Additional Query and Sort Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following query searches for documents with status equal to ``"A"``
that contain the terms ``coffee`` or ``cake`` in the indexed field
``subject`` and specifies a sort order of ascending date, descending
text score:

.. code-block:: javascript

   db.articles.find(
      { status: "A", $text: { $search: "coffee cake" } },
      { score: { $meta: "textScore" } }
   ).sort( { date: 1, score: { $meta: "textScore" } } )

Search a Different Language
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use the optional ``$language`` field in the :query:`$text` expression
to specify a language that determines the list of stop words and the
rules for the stemmer and tokenizer for the search string.

The following query specifies ``es`` for Spanish as the language that
determines the tokenization, stemming, and stop words:

.. code-block:: javascript

   db.articles.find(
      { $text: { $search: "leche", $language: "es" } }
   )

The :query:`$text` expression can also accept the language by name,
``spanish``. See :ref:`text-search-languages` for the supported
languages.

.. seealso:: :doc:`/tutorial/text-search-in-aggregation`

.. [#meta-aggregation]
   The behavior and requirements of the :projection:`$meta` operator
   differs from that of the :expression:`$meta` aggregation operator.
   See the :expression:`$meta` aggregation operator for details.
