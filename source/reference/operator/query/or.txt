===
$or
===

.. default-domain:: mongodb

.. query:: $or

   .. versionadded:: 1.6

   .. versionchanged:: 2.0
      You may nest :query:`$or` operations; however, these
      expressions are not as efficiently optimized as top-level.

   The :query:`$or` operator performs a logical ``OR`` operation on an
   array of *two or more* ``<expressions>`` and selects the documents
   that satisfy *at least* one of the ``<expressions>``. The
   :query:`$or` has the following syntax:

   .. code-block:: javascript

      { $or: [ { <expression1> }, { <expression2> }, ... , { <expressionN> } ] }

   Consider the following example:

   .. code-block:: javascript

      db.inventory.find( { $or: [ { qty: { $lt: 20 } }, { sale: true } ] } )

   This query will select all documents in the ``inventory`` collection
   where either the ``qty`` field value is less than ``20`` **or** the
   ``sale`` field value is ``true``.

Behaviors
---------

``$or`` Clauses and Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using indexes with :query:`$or` queries, each clause of an
:query:`$or` will execute in parallel. These clauses can each use their
own index. Consider the following query:

.. code-block:: javascript

   db.inventory.find ( { $or: [ { price: 1.99 }, { sale: true } ] } )

To support this query, rather than a compound index, you would create
one index on ``price`` and another index on ``sale``:

.. code-block:: javascript

   db.inventory.ensureIndex( { price: 1 } )
   db.inventory.ensureIndex( { sale: 1 } )

``$or`` and Sort Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using the :query:`$or` operator with the :method:`~cursor.sort()`
method, the query will **not** use the indexes on the :query:`$or`
fields. Consider the following query which adds a
:method:`~cursor.sort()` method to the above query:

.. code-block:: javascript

   db.inventory.find ( { $or: [ { price: 1.99 }, { sale: true } ] } ).sort( { item:1 } )

This modified query will not use the index on ``price`` nor the index
on ``sale``.

``$or`` and ``text`` Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If :query:`$or` includes a :query:`$text` query, all clauses in the
:query:`$or` array must be indexed.

``$or`` and GeoSpatial Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 2.6

:operator:`$or` supports :doc:`geospatial clauses
</reference/operator/query-geospatial>` with the following exception
for the near clause (near clause includes :query:`$nearSphere` and
:query:`$near`). :operator:`$or` cannot contain a near clause with any
other clause.

``$or`` versus ``$in``
~~~~~~~~~~~~~~~~~~~~~~

When using :query:`$or` with ``<expressions>`` that are equality checks
for the value of the same field, use the :query:`$in` operator instead
of the :query:`$or` operator.

For example, to select all documents in the ``inventory`` collection
where the ``qty`` field value equals either ``20`` *or* ``50``, use the
:query:`$in` operator:

.. code-block:: javascript

   db.inventory.find ( { qty: { $in: [20, 50] } } )

.. seealso:: :query:`$and`, :method:`~db.collection.find()`,
   :method:`~cursor.sort()`, :query:`$in`
